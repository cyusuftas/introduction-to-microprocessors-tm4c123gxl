


ARM Macro Assembler    Page 1 


    1 00000000         ;Cahit Yusuf Tas - 1937465
    2 00000000         ;07.11.2018
    3 00000000         
    4 00000000 20000000 
                       first   EQU              0x20000000
    5 00000000 20000600 
                       my_data EQU              0x20000600
    6 00000000 20000700 
                       n       EQU              0x20000700
    7 00000000 0000000A 
                       cnt     EQU              0x0A
    8 00000000 00000020 
                       cnt2    EQU              0x20
    9 00000000         ;value  EQU  0x19231993
   10 00000000 20000500 
                       NUM     EQU              0x20000500
   11 00000000         
   12 00000000                 AREA             my_program, CODE, READONLY
   13 00000000                 THUMB
   14 00000000                 EXPORT           __main
   15 00000000         __main
   16 00000000         ;MOV  R7,#0
   17 00000000         loop1
   18 00000000 F04F 5000       LDR              R0,=first   ;initializations fo
                                                            r CONVRT module
   19 00000004 F04F 0200       MOV              R2,#0
   20 00000008 F04F 080A       LDR              R8,=cnt
   21 0000000C F04F 0320       LDR              R3,=cnt2
   22 00000010 4DAA            LDR              R5,=NUM     ;NUM holds the star
                                                            ting memory address
                                                            
   23 00000012 F04F 0C00       MOV              R12,#0
   24 00000016 F04F 0A00       MOV              R10,#0
   25 0000001A         
   26 0000001A         inf_loop                             ;wait for user inpu
                                                            t in an infinite lo
                                                            op
   27 0000001A B420            PUSH             {R5}        ;don't lose the val
                                                            ue at r5 since InCh
                                                            ar uses it.
   28 0000001C                 IMPORT           InChar
   29 0000001C F7FF FFFE       BL               InChar
   30 00000020 F8DF B29C       LDR              R11,=n
   31 00000024 F80B 500A       STRB             R5,[R11,R10] ;store received va
                                                            lues at memory
   32 00000028 F10A 0A01       ADD              R10,#1
   33 0000002C F10C 0C01       ADD              R12,#1      ;increment counter
   34 00000030 BC20            POP              {R5}
   35 00000032 F1BC 0F03       CMP              R12,#3      ;check if enough ch
                                                            aracter(s) received
                                                            : I assumed user wo
                                                            uld give 3 digit in
                                                            put i.e if it is 51
                                                             it must be given a
                                                            s 051
   36 00000036 D1F0            BNE              inf_loop
   37 00000038 E000            B                cont
   38 0000003A         
   39 0000003A E7FE    loop    B                loop



ARM Macro Assembler    Page 2 


   40 0000003C         
   41 0000003C         cont
   42 0000003C F8DF A280       LDR              R10,=n
   43 00000040 F89A 9000       LDRB             R9,[R10]    ;100's -> Most sign
                                                            ificant digit
   44 00000044 F89A B001       LDRB             R11,[R10,#1] 
                                                            ;10's  -> 2nd digit
                                                            
   45 00000048 F89A C002       LDRB             R12,[R10,#2] ;1's   -> Least si
                                                            gnificant digit
   46 0000004C         cmp_n1
   47 0000004C F1B9 0F30       CMP              R9,#0x30    ;compare R9 with As
                                                            cii values
   48 00000050 BF08 F04F 
              0900             MOVEQ            R9,#0       ;set R9 to actual v
                                                            alue if it matches 
                                                            with Ascii value.
   49 00000056 F1B9 0F31       CMP              R9,#0x31    ;this process is re
                                                            peated too much it 
                                                            can be a subroutine
                                                            . open to developme
                                                            nt
   50 0000005A BF08 F04F 
              0901             MOVEQ            R9,#1
   51 00000060 F1B9 0F32       CMP              R9,#0x32
   52 00000064 BF08 F04F 
              0902             MOVEQ            R9,#2
   53 0000006A F1B9 0F33       CMP              R9,#0x33
   54 0000006E BF08 F04F 
              0903             MOVEQ            R9,#3
   55 00000074 F1B9 0F34       CMP              R9,#0x34
   56 00000078 BF08 F04F 
              0904             MOVEQ            R9,#4
   57 0000007E F1B9 0F35       CMP              R9,#0x35
   58 00000082 BF08 F04F 
              0905             MOVEQ            R9,#5
   59 00000088 F1B9 0F36       CMP              R9,#0x36
   60 0000008C BF08 F04F 
              0906             MOVEQ            R9,#6
   61 00000092 F1B9 0F37       CMP              R9,#0x37
   62 00000096 BF08 F04F 
              0907             MOVEQ            R9,#7
   63 0000009C F1B9 0F38       CMP              R9,#0x38
   64 000000A0 BF08 F04F 
              0908             MOVEQ            R9,#8
   65 000000A6 F1B9 0F39       CMP              R9,#0x39
   66 000000AA BF08 F04F 
              0909             MOVEQ            R9,#9
   67 000000B0 F1BB 0F30       CMP              R11,#0x30   ;compare R11 with A
                                                            scii values
   68 000000B4 BF08 F04F 
              0B00             MOVEQ            R11,#0      ;set R11 to actual 
                                                            value if it matches
                                                             with Ascii value.
   69 000000BA F1BB 0F31       CMP              R11,#0x31
   70 000000BE BF08 F04F 
              0B01             MOVEQ            R11,#1
   71 000000C4 F1BB 0F32       CMP              R11,#0x32
   72 000000C8 BF08 F04F 



ARM Macro Assembler    Page 3 


              0B02             MOVEQ            R11,#2
   73 000000CE F1BB 0F33       CMP              R11,#0x33
   74 000000D2 BF08 F04F 
              0B03             MOVEQ            R11,#3
   75 000000D8 F1BB 0F34       CMP              R11,#0x34
   76 000000DC BF08 F04F 
              0B04             MOVEQ            R11,#4
   77 000000E2 F1BB 0F35       CMP              R11,#0x35
   78 000000E6 BF08 F04F 
              0B05             MOVEQ            R11,#5
   79 000000EC F1BB 0F36       CMP              R11,#0x36
   80 000000F0 BF08 F04F 
              0B06             MOVEQ            R11,#6
   81 000000F6 F1BB 0F37       CMP              R11,#0x37
   82 000000FA BF08 F04F 
              0B07             MOVEQ            R11,#7
   83 00000100 F1BB 0F38       CMP              R11,#0x38
   84 00000104 BF08 F04F 
              0B08             MOVEQ            R11,#8
   85 0000010A F1BB 0F39       CMP              R11,#0x39
   86 0000010E BF08 F04F 
              0B09             MOVEQ            R11,#9
   87 00000114 F1BC 0F30       CMP              R12,#0x30   ;apply same checks 
                                                            for least significa
                                                            nt digit
   88 00000118 BF08 F04F 
              0C00             MOVEQ            R12,#0      ;set actual value o
                                                            f least significant
                                                             digit if it matche
                                                            s it's Ascii value 
                                                            
   89 0000011E F1BC 0F31       CMP              R12,#0x31
   90 00000122 BF08 F04F 
              0C01             MOVEQ            R12,#1
   91 00000128 F1BC 0F32       CMP              R12,#0x32
   92 0000012C BF08 F04F 
              0C02             MOVEQ            R12,#2
   93 00000132 F1BC 0F33       CMP              R12,#0x33
   94 00000136 BF08 F04F 
              0C03             MOVEQ            R12,#3
   95 0000013C F1BC 0F34       CMP              R12,#0x34
   96 00000140 BF08 F04F 
              0C04             MOVEQ            R12,#4
   97 00000146 F1BC 0F35       CMP              R12,#0x35
   98 0000014A BF08 F04F 
              0C05             MOVEQ            R12,#5
   99 00000150 F1BC 0F36       CMP              R12,#0x36
  100 00000154 BF08 F04F 
              0C06             MOVEQ            R12,#6
  101 0000015A F1BC 0F37       CMP              R12,#0x37
  102 0000015E BF08 F04F 
              0C07             MOVEQ            R12,#7
  103 00000164 F1BC 0F38       CMP              R12,#0x38
  104 00000168 BF08 F04F 
              0C08             MOVEQ            R12,#8
  105 0000016E F1BC 0F39       CMP              R12,#0x39
  106 00000172 BF08 F04F 
              0C09             MOVEQ            R12,#9
  107 00000178 EB06 0689       ADD              R6,R9,LSL #2 ;multiply can be d



ARM Macro Assembler    Page 4 


                                                            one by using LSL wi
                                                            th desired amount 
  108 0000017C EB06 1649       ADD              R6,R9,LSL #5
  109 00000180 EB06 1689       ADD              R6,R9,LSL #6 ;R6 = 100*R9
  110 00000184 EB06 064B       ADD              R6,R11,LSL #1 ;
  111 00000188 EB06 06CB       ADD              R6,R11,LSL #3 ;R6 = 100*R9 + 10
                                                            *R11
  112 0000018C 46B3            MOV              R11,R6
  113 0000018E 44E3            ADD              R11,R12     ;R6 = 100*R9 + 10*R
                                                            11 + R12
  114 00000190 F04F 0C00       MOV              R12,#0      ;At the end R11 hol
                                                            ds the result of us
                                                            er input in hex
  115 00000194 465A            MOV              R2,R11      ;R2 holds the minim
                                                            um value
  116 00000196         ;Set minimum value as given number of soulstones initial
                       ly
  117 00000196         
  118 00000196 F000 F801       BL               recursive
  119 0000019A E089            B                conv
  120 0000019C         ;RECURSIVE PART OF CODE
  121 0000019C         recursive
  122 0000019C B502            PUSH             {LR,R1}     ;Push eligibiliy re
                                                            gister(R1) and Link
                                                             Register to stack.
                                                            
  123 0000019E F1BB 0F00       CMP              R11,#0
  124 000001A2 BF08 2200       MOVEQ            R2,#0
  125 000001A6 D07E            BEQ              cont1
  126 000001A8         
  127 000001A8         ;R11 holds the remaining number of souls or a given numb
                       er of souls if it is for the first time
  128 000001A8 F04F 0100       MOV              R1,#0       ;R1 holds portal en
                                                            try eligibility -> 
                                                            1001:9 -> means it 
                                                            can go through port
                                                            als 1 and 4 but not
                                                             2 and 3.
  129 000001AC         
  130 000001AC         ;Portal 4 checks
  131 000001AC F04F 0C15       MOV              R12,#21     ;check if its divis
                                                            ible with 21
  132 000001B0 FBBB FAFC       UDIV             R10,R11,R12 ;R10=R11/R12 
  133 000001B4 FB0A B91C       MLS              R9,R10,R12,R11 ;R9=R11-R10*R12
  134 000001B8 F1B9 0F00       CMP              R9,#0       ;Compare remaining 
                                                            is 0 or not
  135 000001BC BF01 3108       ADDEQ            R1,#8       ;Set 4th LSB to 1 t
                                                            o indicate Portal 4
                                                             is available to en
                                                            ter for a given num
                                                            ber of soulstones o
                                                            r remaining soulsto
                                                            nes
  136 000001C0 F84D BD04       PUSHEQ           {R11}       ;Don't lose the num
                                                            ber of soulstones.
  137 000001C4 EBAB 0B0B       SUBEQ            R11,R11     ;If you enter porta
                                                            l 4 you spend all o
                                                            f the soulstones
  138 000001C8 F7FF FFE8       BLEQ             recursive   ;Enter from the por



ARM Macro Assembler    Page 5 


                                                            tal
  139 000001CC         
  140 000001CC F1BB 0F63       CMP              R11,#99     ;Portal 1 checks
  141 000001D0 BF81 3101       ADDHI            R1,#1       ;Set LSB to 1 to in
                                                            dicate Portal 1 is 
                                                            available.
  142 000001D4 F84D BD04       PUSHHI           {R11}
  143 000001D8 F1AB 0B2F       SUBHI            R11,#47     ;spend 47 soulstone
                                                            s
  144 000001DC F7FF FFDE       BLHI             recursive   ;Enter portal
  145 000001E0         
  146 000001E0         ;Portal 3 checks
  147 000001E0 F04F 0C02       MOV              R12,#2      ;Set dividing part
  148 000001E4 FBBB FAFC       UDIV             R10,R11,R12
  149 000001E8 FB0A B91C       MLS              R9,R10,R12,R11
  150 000001EC F1B9 0F00       CMP              R9,#0       ;Check if remaining
                                                             is 0 meaning it is
                                                             even or not
  151 000001F0 BF01 3104       ADDEQ            R1,#4       ;Set 3th LSB of eli
                                                            gibility register t
                                                            o indicate 3rd port
                                                            al is available
  152 000001F4 F84D BD04       PUSHEQ           {R11}
  153 000001F8 EA4F 0B5B       LSREQ            R11,#1      ;spend half of soul
                                                            stones
  154 000001FC F7FF FFCE       BLEQ             recursive   ;enter portal
  155 00000200         
  156 00000200         ;Portal 2 checks
  157 00000200 F04F 0C02       MOV              R12,#2
  158 00000204 FBBB FAFC       UDIV             R10,R11,R12
  159 00000208 FB0A B91C       MLS              R9,R10,R12,R11
  160 0000020C F1B9 0F01       CMP              R9,#1       ;Check if it is odd
                                                             or not
  161 00000210 BF08 3102       ADDEQ            R1,#2       ;If it is odd set e
                                                            ligibility bit of P
                                                            ortal 2
  162 00000214 D000            BEQ              check_50    ;if it is odd check
                                                             if it is greater t
                                                            han 50 or not
  163 00000216 D140            BNE              cont2
  164 00000218         check_50
  165 00000218 F1BB 0F32       CMP              R11,#50
  166 0000021C BF48 3902       SUBMI            R1,#2       ;if it is not great
                                                            er than 50 take bac
                                                            k 2 added
  167 00000220 BF84 F84D 
              BD04             PUSHHI           {R11}       ;if it passes all c
                                                            hecks get the produ
                                                            ct of digits.
  168 00000226 F000 F803       BLHI             get_product
  169 0000022A BF98 F000 
              F835             BLLS             cont2       ;otherwise continue
                                                            
  170 00000230         get_product
  171 00000230 B40F            PUSH             {R0,R1,R2,R3} ;since CONVRT sub
                                                            routine is used, do
                                                            nt lose register va
                                                            lues
  172 00000232 465C            MOV              R4,R11      ;give total number 



ARM Macro Assembler    Page 6 


                                                            of soulstones avail
                                                            able as input to CO
                                                            NVRT subroutine usi
                                                            ng R4
  173 00000234 F84D BD04       PUSH             {R11}
  174 00000238                 IMPORT           CONVRT      ;CONVRT subroutine 
                                                            is used in order to
                                                             convert binary val
                                                            ue to ascii value o
                                                            f corresponding dig
                                                            its.
  175 00000238 F7FF FFFE       BL               CONVRT
  176 0000023C F85D BB04       POP              {R11}
  177 00000240 F04F 0301       MOV              R3,#1       ;hold the result of
                                                             digit product
  178 00000244         digit_product
  179 00000244 7829            LDRB             R1,[R5]     ;Load one digit and
                                                             check next digit
  180 00000246 786A            LDRB             R2,[R5,#1]
  181 00000248 F105 0501       ADD              R5,#1       ;Corresponding valu
                                                            es of Ascii represe
                                                            nted digits are ass
                                                            igned
  182 0000024C 2930            CMP              R1,#0x30
  183 0000024E BF08 2101       MOVEQ            R1,#1
  184 00000252 2931            CMP              R1,#0x31
  185 00000254 BF08 2101       MOVEQ            R1,#1
  186 00000258 2932            CMP              R1,#0x32
  187 0000025A BF08 2102       MOVEQ            R1,#2
  188 0000025E 2933            CMP              R1,#0x33
  189 00000260 BF08 2103       MOVEQ            R1,#3
  190 00000264 2934            CMP              R1,#0x34
  191 00000266 BF08 2104       MOVEQ            R1,#4
  192 0000026A 2935            CMP              R1,#0x35
  193 0000026C BF08 2105       MOVEQ            R1,#5
  194 00000270 2936            CMP              R1,#0x36
  195 00000272 BF08 2106       MOVEQ            R1,#6
  196 00000276 2937            CMP              R1,#0x37
  197 00000278 BF08 2107       MOVEQ            R1,#7
  198 0000027C 2938            CMP              R1,#0x38
  199 0000027E BF08 2108       MOVEQ            R1,#8
  200 00000282 2939            CMP              R1,#0x39
  201 00000284 BF08 2109       MOVEQ            R1,#9
  202 00000288 FB03 F301       MUL              R3,R1       ;digits are multipl
                                                            ied in here
  203 0000028C 2A04            CMP              R2,#0x04    ;check if next digi
                                                            t is string null
  204 0000028E D1D9            BNE              digit_product ;loop until end o
                                                            f digits
  205 00000290 EBAB 0B03       SUB              R11,R3      ;R11 = R11 - R3  ->
                                                             R3 holds the produ
                                                            ct of digits
  206 00000294         ;SUB  R11,#5    ;multiply of its digits will be subtract
                       ed. its equal to 5 for testing purposes.
  207 00000294 BC0F            POP              {R0,R1,R2,R3} 
                                                            ;release back R0-R3
                                                            
  208 00000296 F7FF FF81       BL               recursive   ;enter portal
  209 0000029A         cont2



ARM Macro Assembler    Page 7 


  210 0000029A 2900            CMP              R1,#0       ;check if any porta
                                                            l is available or n
                                                            ot by controlling e
                                                            ligibility register
                                                            (R1) 
  211 0000029C D000            BEQ              set_min     ;if there is no ava
                                                            ilable portal go to
                                                             set_min     
  212 0000029E D102            BNE              cont1       ;program reaches to
                                                             cont1 when all ava
                                                            ilaable portals are
                                                             visited for a give
                                                            n number of soulsto
                                                            nes
  213 000002A0         set_min
  214 000002A0 4593            CMP              R11,R2      ;check if remaining
                                                             number of soulston
                                                            es are less than pr
                                                            evious minimum valu
                                                            e
  215 000002A2 BF38 465A       MOVLO            R2,R11      ;assign remaining n
                                                            umber of soulstones
                                                             as new minimum val
                                                            ue
  216 000002A6         cont1
  217 000002A6 E8BD 4002       POP              {R1,LR}     ;release registers
  218 000002AA F85D BB04       POP              {R11}
  219 000002AE 4770            BX               LR
  220 000002B0         
  221 000002B0         conv
  222 000002B0 4614            MOV              R4,R2       ;move minimum value
                                                             to R4 since CONVRT
                                                             takes R4 as an arg
                                                            ument to convert it
                                                             to decimal
  223 000002B2                 IMPORT           CONVRT
  224 000002B2 F7FF FFFE       BL               CONVRT      ;Convert the minimu
                                                            m value in binary t
                                                            o corresponding Asc
                                                            ii representation f
                                                            or each decimal dig
                                                            it. 
  225 000002B6                 IMPORT           OutStr
  226 000002B6 F7FF FFFE       BL               OutStr      ;takes r5 as an arg
                                                            ument to point the 
                                                            start of memory loc
                                                            ation holding decim
                                                            al digits 
  227 000002BA E6A1            B                loop1       ;Go back to way up 
                                                            and wait for next i
                                                            nput from user.
  228 000002BC         
  229 000002BC                 ALIGN
  230 000002BC                 END
              20000500 
              20000700 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Keil
_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\



ARM Macro Assembler    Page 8 


Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --
predefine="TM4C123GH6PM SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__main 00000000

Symbol: __main
   Definitions
      At line 15 in file main.s
   Uses
      At line 14 in file main.s
Comment: __main used once
check_50 00000218

Symbol: check_50
   Definitions
      At line 164 in file main.s
   Uses
      At line 162 in file main.s
Comment: check_50 used once
cmp_n1 0000004C

Symbol: cmp_n1
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: cmp_n1 unused
cont 0000003C

Symbol: cont
   Definitions
      At line 41 in file main.s
   Uses
      At line 37 in file main.s
Comment: cont used once
cont1 000002A6

Symbol: cont1
   Definitions
      At line 216 in file main.s
   Uses
      At line 125 in file main.s
      At line 212 in file main.s

cont2 0000029A

Symbol: cont2
   Definitions
      At line 209 in file main.s
   Uses
      At line 163 in file main.s
      At line 169 in file main.s

conv 000002B0

Symbol: conv
   Definitions
      At line 221 in file main.s
   Uses
      At line 119 in file main.s
Comment: conv used once
digit_product 00000244



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: digit_product
   Definitions
      At line 178 in file main.s
   Uses
      At line 204 in file main.s
Comment: digit_product used once
get_product 00000230

Symbol: get_product
   Definitions
      At line 170 in file main.s
   Uses
      At line 168 in file main.s
Comment: get_product used once
inf_loop 0000001A

Symbol: inf_loop
   Definitions
      At line 26 in file main.s
   Uses
      At line 36 in file main.s
Comment: inf_loop used once
loop 0000003A

Symbol: loop
   Definitions
      At line 39 in file main.s
   Uses
      At line 39 in file main.s
Comment: loop used once
loop1 00000000

Symbol: loop1
   Definitions
      At line 17 in file main.s
   Uses
      At line 227 in file main.s
Comment: loop1 used once
my_program 00000000

Symbol: my_program
   Definitions
      At line 12 in file main.s
   Uses
      None
Comment: my_program unused
recursive 0000019C

Symbol: recursive
   Definitions
      At line 121 in file main.s
   Uses
      At line 118 in file main.s
      At line 138 in file main.s
      At line 144 in file main.s
      At line 154 in file main.s
      At line 208 in file main.s




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

set_min 000002A0

Symbol: set_min
   Definitions
      At line 213 in file main.s
   Uses
      At line 211 in file main.s
Comment: set_min used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NUM 20000500

Symbol: NUM
   Definitions
      At line 10 in file main.s
   Uses
      At line 22 in file main.s
Comment: NUM used once
cnt 0000000A

Symbol: cnt
   Definitions
      At line 7 in file main.s
   Uses
      At line 20 in file main.s
Comment: cnt used once
cnt2 00000020

Symbol: cnt2
   Definitions
      At line 8 in file main.s
   Uses
      At line 21 in file main.s
Comment: cnt2 used once
first 20000000

Symbol: first
   Definitions
      At line 4 in file main.s
   Uses
      At line 18 in file main.s
Comment: first used once
my_data 20000600

Symbol: my_data
   Definitions
      At line 5 in file main.s
   Uses
      None
Comment: my_data unused
n 20000700

Symbol: n
   Definitions
      At line 6 in file main.s
   Uses
      At line 30 in file main.s
      At line 42 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

CONVRT 00000000

Symbol: CONVRT
   Definitions
      At line 174 in file main.s
      At line 223 in file main.s
   Uses
      At line 175 in file main.s
      At line 224 in file main.s
Warning: CONVRT multiply defined
InChar 00000000

Symbol: InChar
   Definitions
      At line 28 in file main.s
   Uses
      At line 29 in file main.s
Comment: InChar used once
OutStr 00000000

Symbol: OutStr
   Definitions
      At line 225 in file main.s
   Uses
      At line 226 in file main.s
Comment: OutStr used once
3 symbols
360 symbols in table
